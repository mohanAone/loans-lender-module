// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Add Team Name",
            "email": "Team DL or Slack Group Name"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/counter/create": {
            "post": {
                "description": "Creates a new counter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "counter"
                ],
                "summary": "Creates a new counter",
                "operationId": "createCounter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "counter key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/counter/current": {
            "get": {
                "description": "Get the current value of counter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "counter"
                ],
                "summary": "Get the current value of counter",
                "operationId": "currentCount",
                "parameters": [
                    {
                        "type": "string",
                        "description": "counter key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.CounterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/counter/decrement": {
            "put": {
                "description": "Decrement an existing counter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "counter"
                ],
                "summary": "Decrement an existing counter",
                "operationId": "decrementCounter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "counter key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/counter/increment": {
            "put": {
                "description": "Increment an existing counter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "counter"
                ],
                "summary": "Increment an existing counter",
                "operationId": "incrementCounter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "counter key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fullName": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Gets the full name from the first name and last name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fullName"
                ],
                "summary": "Gets the full name from the first name and last name",
                "operationId": "fullName",
                "parameters": [
                    {
                        "description": "first name and last name",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.FullNameRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.FullNameResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/maths": {
            "post": {
                "description": "Returns a op b",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "asyncMaths"
                ],
                "summary": "Does a maths op in a async way",
                "operationId": "asyncMaths",
                "parameters": [
                    {
                        "description": "a op b",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MathsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MathsJobResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.MathsJobResponse"
                        }
                    }
                }
            }
        },
        "/maths/{id}": {
            "get": {
                "description": "GGet the status (and result if completed) of the job",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "asyncMaths"
                ],
                "summary": "Get the status (and result if completed) of the job",
                "operationId": "getJobStatus",
                "parameters": [
                    {
                        "type": "string",
                        "description": "counter key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jobs.JobResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/jobs.JobResult"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/jobs.JobResult"
                        }
                    }
                }
            }
        },
        "/moxy": {
            "get": {
                "description": "Get the moxy response",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "moxy"
                ],
                "summary": "Get the moxy response",
                "operationId": "moxy",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MoxyResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "jobs.JobResult": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string"
                },
                "res": {},
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.CounterResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "models.FullNameRequest": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string",
                    "example": "Nitesh"
                },
                "lastName": {
                    "type": "string",
                    "example": "Jain"
                }
            }
        },
        "models.FullNameResponse": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Nitesh Jain"
                }
            }
        },
        "models.MathsJobResponse": {
            "type": "object",
            "properties": {
                "res": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.MathsRequest": {
            "type": "object",
            "properties": {
                "a": {
                    "type": "integer"
                },
                "b": {
                    "type": "integer"
                },
                "op": {
                    "type": "string"
                }
            }
        },
        "models.MoxyResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Go Example Project",
	Description: "\"Bearer\" followed by a space and JWT token (Specify Trade vs Non Trade JWt token).",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
